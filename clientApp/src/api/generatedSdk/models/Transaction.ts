/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    cryptoTicker: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    date: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    quantityTransacted: number;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    price: number;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    fee: number;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    coinsTransacted: number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    transactionType: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    exchange?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    numberOfCoinsSold: number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    notes?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    userId: number;
}

/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "cryptoTicker" in value;
    isInstance = isInstance && "date" in value;
    isInstance = isInstance && "quantityTransacted" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "coinsTransacted" in value;
    isInstance = isInstance && "transactionType" in value;
    isInstance = isInstance && "numberOfCoinsSold" in value;
    isInstance = isInstance && "userId" in value;

    return isInstance;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'cryptoTicker': json['cryptoTicker'],
        'date': json['date'],
        'quantityTransacted': json['quantityTransacted'],
        'price': json['price'],
        'fee': json['fee'],
        'coinsTransacted': json['coinsTransacted'],
        'transactionType': json['transactionType'],
        'exchange': !exists(json, 'exchange') ? undefined : json['exchange'],
        'numberOfCoinsSold': json['numberOfCoinsSold'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'userId': json['userId'],
    };
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'cryptoTicker': value.cryptoTicker,
        'date': value.date,
        'quantityTransacted': value.quantityTransacted,
        'price': value.price,
        'fee': value.fee,
        'coinsTransacted': value.coinsTransacted,
        'transactionType': value.transactionType,
        'exchange': value.exchange,
        'numberOfCoinsSold': value.numberOfCoinsSold,
        'notes': value.notes,
        'userId': value.userId,
    };
}

