/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Transaction } from './Transaction';
import {
    TransactionFromJSON,
    TransactionFromJSONTyped,
    TransactionToJSON,
} from './Transaction';

/**
 * 
 * @export
 * @interface TransactionPaginationResult
 */
export interface TransactionPaginationResult {
    /**
     * 
     * @type {Array<Transaction>}
     * @memberof TransactionPaginationResult
     */
    records: Array<Transaction>;
    /**
     * 
     * @type {number}
     * @memberof TransactionPaginationResult
     */
    totalRecordCount: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionPaginationResult
     */
    currentPageIndex: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionPaginationResult
     */
    pageSize: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionPaginationResult
     */
    readonly totalPages: number;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionPaginationResult
     */
    readonly hasPreviousPage: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionPaginationResult
     */
    readonly hasNextPage: boolean;
}

/**
 * Check if a given object implements the TransactionPaginationResult interface.
 */
export function instanceOfTransactionPaginationResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "records" in value;
    isInstance = isInstance && "totalRecordCount" in value;
    isInstance = isInstance && "currentPageIndex" in value;
    isInstance = isInstance && "pageSize" in value;
    isInstance = isInstance && "totalPages" in value;
    isInstance = isInstance && "hasPreviousPage" in value;
    isInstance = isInstance && "hasNextPage" in value;

    return isInstance;
}

export function TransactionPaginationResultFromJSON(json: any): TransactionPaginationResult {
    return TransactionPaginationResultFromJSONTyped(json, false);
}

export function TransactionPaginationResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionPaginationResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'records': ((json['records'] as Array<any>).map(TransactionFromJSON)),
        'totalRecordCount': json['totalRecordCount'],
        'currentPageIndex': json['currentPageIndex'],
        'pageSize': json['pageSize'],
        'totalPages': json['totalPages'],
        'hasPreviousPage': json['hasPreviousPage'],
        'hasNextPage': json['hasNextPage'],
    };
}

export function TransactionPaginationResultToJSON(value?: TransactionPaginationResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'records': ((value.records as Array<any>).map(TransactionToJSON)),
        'totalRecordCount': value.totalRecordCount,
        'currentPageIndex': value.currentPageIndex,
        'pageSize': value.pageSize,
    };
}

