/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddTransactionsRequest,
  TransactionDTO,
  TransactionDTOPaginationResult,
} from '../models';
import {
    AddTransactionsRequestFromJSON,
    AddTransactionsRequestToJSON,
    TransactionDTOFromJSON,
    TransactionDTOToJSON,
    TransactionDTOPaginationResultFromJSON,
    TransactionDTOPaginationResultToJSON,
} from '../models';

export interface AddTransactionsOperationRequest {
    addTransactionsRequest?: AddTransactionsRequest;
}

export interface GetTransactionsRequest {
    pageIndex?: number;
    pageSize?: number;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     */
    async addTransactionsRaw(requestParameters: AddTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Transactions/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTransactionsRequestToJSON(requestParameters.addTransactionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDTOFromJSON));
    }

    /**
     */
    async addTransactions(requestParameters: AddTransactionsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDTO>> {
        const response = await this.addTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDTOPaginationResult>> {
        const queryParameters: any = {};

        if (requestParameters.pageIndex !== undefined) {
            queryParameters['pageIndex'] = requestParameters.pageIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDTOPaginationResultFromJSON(jsonValue));
    }

    /**
     */
    async getTransactions(requestParameters: GetTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDTOPaginationResult> {
        const response = await this.getTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
